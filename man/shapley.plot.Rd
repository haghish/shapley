% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shapley.plot.R
\name{shapley.plot}
\alias{shapley.plot}
\title{Normalize a vector based on specified minimum and maximum values}
\usage{
shapley.plot(shapley, plot = "bar")
}
\arguments{
\item{shapley}{object of class 'shapley', as returned by the 'shapley' function}

\item{plot}{character, specifying name of the plot. the default is 'bar',
creating a barplot of the mean weighted feature importance alongside
their confidence intervals. Other options are "pie", "tree", and
"waffle".}
}
\value{
ggplot2 plot
}
\description{
This function normalizes a vector based on specified minimum
             and maximum values. If the minimum and maximum values are not
             specified, the function will use the minimum and maximum values
             of the vector.
}
\examples{
\dontrun{
# load the required libraries for building the base-learners and the ensemble models
library(h2o)            #shapley supports h2o models
library(shapley)

# initiate the h2o server
h2o.init(ignore_config = TRUE, nthreads = 2, bind_to_localhost = FALSE, insecure = TRUE)

# upload data to h2o cloud
prostate_path <- system.file("extdata", "prostate.csv", package = "h2o")
prostate <- h2o.importFile(path = prostate_path, header = TRUE)

### H2O provides 2 types of grid search for tuning the models, which are
### AutoML and Grid. Below, I demonstrate how weighted mean shapley values
### can be computed for both types.

set.seed(10)

#######################################################
### PREPARE AutoML Grid (takes a couple of minutes)
#######################################################
# run AutoML to tune various models (GBM) for 60 seconds
y <- "CAPSULE"
prostate[,y] <- as.factor(prostate[,y])  #convert to factor for classification
aml <- h2o.automl(y = y, training_frame = prostate, max_runtime_secs = 120,
                 include_algos=c("GBM"),

                 # this setting ensures the models are comparable for building a meta learner
                 seed = 2023, nfolds = 10,
                 keep_cross_validation_predictions = TRUE)

### call 'shapley' function to compute the weighted mean and weighted confidence intervals
### of SHAP values across all trained models.
### Note that the 'newdata' should be the testing dataset!
result <- shapley(models = aml, newdata = prostate, plot = TRUE)

#######################################################
### PLOT THE WEIGHTED MEAN SHAP VALUES
#######################################################

shapley.plot(result, plot = "bar")
shapley.plot(result, plot = "pie")
shapley.plot(result, plot = "tree")
shapley.plot(result, plot = "waffle")
}
}
\author{
E. F. Haghish
}
